@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using WebData.Objects.PageContext.Objs

@page "/userprofile"


<MudGrid Spacing="4">

    <!-- Offene Punkte -->
    <MudItem md="12">
        <MudCard Class="pa-4">
            <MudGrid>
                @foreach (Aufgabe task in AppBehavior.Aufgaben.AufgabenVerzeichnis)
                {
                    <MudItem>
                        <MudCard Class="pa-4">
                            <MudText>@task.Name</MudText>
                            <MudText>@task.Description</MudText>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudCard>
    </MudItem>

    <!-- Profil-Daten-Ändern ->
    <MudItem md="12">
        <MudCard Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudButton ButtonType="ButtonType.Submit"> Change </MudButton>
            </MudForm>
        </MudCard>
    </MudItem>

</MudGrid>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 16)
            yield return "Password must be at least of length 16";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}
