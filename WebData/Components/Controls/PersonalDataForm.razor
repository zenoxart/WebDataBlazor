@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using WebData.Objects.PageContext.Manager
<MudCard Class="pa-4">


    <MudBadge OnClick="ChangeEdit" Color="editPersonalDataColor" Content="@badgeTextEdit">
        <MudText Align="Align.Center" Typo="Typo.h5" Class="mb-4" Style="margin-right: 10px;">
            Personal Data
        </MudText>
    </MudBadge>


    <MudForm @ref="personalDataForm" @bind-IsValid="@editPersonalDataSuccess" @bind-Errors="@errors" Disabled="@editPersonalData">
        <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" Value="@AppBehavior.BenutzerVerwaltung.CurrentUser.Name" />
        <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                      Value="@AppBehavior.BenutzerVerwaltung.CurrentUser.Email"
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
        <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="password"
                      InputType="InputType.Password"
                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                      RequiredError="Password is required!" />
        <MudButton ButtonType="ButtonType.Submit"> Save </MudButton>
    </MudForm>
</MudCard>

@code {

    [Parameter]
    public AppManager AppBehavior { get; set; }

    string badgeTextEdit = "Edit";
    Color editPersonalDataColor = Color.Default;
    private void ChangeEdit()
    {
        editPersonalData = !editPersonalData;
        editPersonalDataColor = !editPersonalData ? Color.Error : Color.Default;
    }
    private bool _editPersonalData = true;
    public bool editPersonalData { get; set; } = true;
    bool editPersonalDataSuccess;
    string[] errors = { };
    MudTextField<string> password;
    MudForm personalDataForm;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 16)
            yield return "Password must be at least of length 16";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (password.Value != arg)
            return "Passwords don't match";
        return null;
    }

}
